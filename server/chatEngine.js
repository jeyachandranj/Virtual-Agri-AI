const sdk = require("microsoft-cognitiveservices-speech-sdk");
const dotenv = require("dotenv");
const path = require("path");
const fs = require("fs");
const mongoose = require("mongoose");
const Groq = require("groq-sdk");

// Load environment variables
dotenv.config();

// MongoDB connection





class Chatbot {
    constructor(public_path = "public") {
        // Groq API key management
        this.apiKeys = [
            process.env.GROQ_API_KEY_1 || "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",
            process.env.GROQ_API_KEY_2 || "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",
            process.env.GROQ_API_KEY_3 || "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",
            process.env.GROQ_API_KEY_4 || "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"
        ];

        this.currentIndex = 0;
        this.groq = this.initializeGroq();

        // Speech service configuration
        this.speechConfig = sdk.SpeechConfig.fromSubscription(
            process.env.SPEECH_KEY || 'BKcGwBuh2Ix5W2ob8GvkWTK67cAXfnt4Rf5rh6l2orum6fMDCV2pJQQJ99ALACYeBjFXJ3w3AAAYACOG6Bz3',
            process.env.SPEECH_REGION || 'eastus'
        );

        // Directory setup
        this.publicDir = path.join(process.cwd(), public_path);

        this.setupDirectories();

        // Conversation state
        this.socket_id = null;
        this.groqHistory = [];
        this.messages = [];
        this.audioFilePaths = [];
        this.interviewee = {
            name: "",
            resumeText: ""
        };
    }

    setupDirectories() {
        const dirs = [
            path.join(this.publicDir, "temp"),
            path.join(this.publicDir, "temp/audio"),
            path.join(this.publicDir, "temp/chats")
        ];

        dirs.forEach(dir => {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
            }
        });
    }

    initializeGroq() {
        try {
            return new Groq({
                apiKey: this.apiKeys[this.currentIndex]
            });
        } catch (error) {
            console.error("Error initializing Groq:", error);
            // Rotate to next API key if available
            this.currentIndex = (this.currentIndex + 1) % this.apiKeys.length;
            return new Groq({
                apiKey: this.apiKeys[this.currentIndex]
            });
        }
    }

    async initialize(socket_id, language = 'tamil') {
        console.log("languvage",language);
        this.socket_id = socket_id;
        this.language = language;

        // Set up speech config
        

        // Reset conversation state
        this.groqHistory = [];
        this.messages = [];
        this.audioFilePaths = [];
        let ai_content;

        if (language == 'tamil') {
            console.log("languvage",language);

            this.speechConfig.speechRecognitionLanguage = "ta-IN";

        // Set Tamil Female voice for synthesis
        this.speechConfig.speechSynthesisVoiceName = "ta-IN-PallaviNeural";

            ai_content = `роирпА 40 ро╡ро░рпБроЯроорпН роЕройрпБрокро╡роорпБро│рпНро│ ро╡ро┐ро╡роЪро╛ропроХрпН роХро▓рпНро╡ро┐ роЖроЪро┐ро░ро┐ропро░рпН. роирпА ро╡ро┐ро╡роЪро╛ропроорпН, ро╡ро┐ро╡роЪро╛роп роорпБро▒рпИроХро│рпН, рокропро┐ро░рпНроХро│ро┐ройрпН ро╡ро│ро░рпНроЪрпНроЪро┐, роЙро░роЩрпНроХро│рпН, роирпАро░рпН роорпЗро▓ро╛рогрпНроорпИ, рокрпВроЪрпНроЪро┐роХрпНроХрпКро▓рпНро▓ро┐роХро│рпН, рооро▒рпНро▒рпБроорпН ро╡ро┐ро│рпИроЪрпНроЪро▓рпН роЕродро┐роХро░ро┐роХрпНроХрпБроорпН роЙродрпНродро┐роХро│рпН рокро▒рпНро▒ро┐роп ро╡ро┐ро╖ропроЩрпНроХро│рпИ роороЯрпНроЯрпБроорпЗ рокродро┐ро▓ро│ро┐роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН.

рокропройро░рпН роОроирпНрод ро╡ро┐ро╡роЪро╛роп родрпКроЯро░рпНрокро╛рой роХрпЗро│рпНро╡ро┐ропрпИропрпБроорпН роХрпЗроЯрпНроЯро╛ро▓рпН, роирпА роорпБродро▓ро┐ро▓рпН роорпБроХрпНроХро┐ропрооро╛рой ро╡ро┐ро╡роЪро╛роп ро╡ро┤ро┐роорпБро▒рпИроХро│рпИроЪрпН роЪрпКро▓рпНро▓ ро╡рпЗрогрпНроЯрпБроорпН. роЕродройрпН рокро┐ро▒роХрпБ роЙро░рпИроХро│рпН, роирпАро░рпН роЕро│ро╡рпБ, рокро░рпБро╡роиро┐ро▓рпИ, роиро┐ро▓родрпНродро┐ройрпН родройрпНроорпИ, рооро▒рпНро▒рпБроорпН роТро┤рпБроЩрпНроХрпБроорпБро▒рпИ рокропро┐ро░ро┐роЯро▓рпН роорпБро▒рпИроХро│рпН рокрпЛройрпНро▒ро╡ро▒рпНро▒рпИрокрпН рокро▒рпНро▒ро┐роп ро╡ро┐ро│роХрпНроХроЩрпНроХро│рпИ рооройро┐родро░рпНроХро│рпН рокрпЗроЪрпБроорпН ро╡ро┤ро┐ропро┐ро▓рпН роХрпВро▒ ро╡рпЗрогрпНроЯрпБроорпН. роирпА рокрпКродрпБро╡ро╛роХ роТро░рпБ ро╡ро┐ро╡роЪро╛ропроХрпН роХро▓роирпНродрпБро░рпИропро╛роЯро▓рпН роироЯродрпНродрпБроорпН рокрпЛро▓рпН, роОро│ро┐роп рооро▒рпНро▒рпБроорпН родрпЖро│ро┐ро╡ро╛рой роорпБро▒рпИропро┐ро▓рпН ро╡ро┐ро╡ро░ро┐роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН.

ЁЯУМ рокродро┐ро▓рпНроХро│рпН рокродрпНродро┐/рокро░ро┐роЯрпНроЪрпИ рокрпЛройрпНро▒ роХроЯрпНроЯрпБро░рпИроХро│ро╛роХ роЗро░рпБроХрпНроХроХрпНроХрпВроЯро╛родрпБ! рокродро┐ро▓рпНроХро│рпН рооройро┐родро░рпН рокрпЗроЪрпБро╡родрпБ рокрпЛро▓ роЕроорпИроирпНродрпБ, роорпБройрпНройрогро┐ ро╡ро┐ро╡роЪро╛роп роиро┐рокрпБрогро░рпН роХрпВро▒рпБро╡родрпБ рокрпЛро▓ роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН. роорпБроХрпНроХро┐ропрооро╛рой ро╡ро┐ро╖ропроЩрпНроХро│рпН рокрпБро│рпНро│ро┐ро╡ро┐ро╡ро░рооро╛рой роорпБро▒рпИропро┐ро▓рпН (point-wise) роЕро▓рпНро▓родрпБ ро╡ро┐ро╡роЪро╛ропро┐роХро│рпН рокрпЗроЪрпБро╡родрпБ рокрпЛро▓ роЪро┐ро▒рокрпНрокро╛роХ роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН.

ЁЯУМ роЙрогрпНроорпИропро╛рой ро╡ро┐ро╡роЪро╛роп роиро┐рокрпБрогро░ро╛роХ роироЯро┐роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН:

роОрокрпНрокрпЛродрпБроорпН рокро┤роорпКро┤ро┐роХро│рпН, роЪро╛ройрпНро▒рпБроХро│рпН, рооро▒рпНро▒рпБроорпН ро╡ро┐ро╡роЪро╛роп ро╡ро┤роХрпНроХро╛ро▒рпНро▒рпИроХрпН роХрпКрогрпНроЯрпБ рокрпЗроЪ ро╡рпЗрогрпНроЯрпБроорпН.
роЙрогрпНроорпИропро╛рой ро╡ро┐ро╡роЪро╛ропроХрпН роХрпБро┤рпБроороорпН роироЯродрпНродрпБроорпН роиро┐рокрпБрогро░рпН рокрпЛро▓ родроХро╡ро▓рпНроХро│рпН ро╡ро┤роЩрпНроХ ро╡рпЗрогрпНроЯрпБроорпН.
"роЗродрпБ рооро┐роХро╡рпБроорпН роорпБроХрпНроХро┐ропроорпН!", "роЗроирпНрод рооро╛родро┐ро░ро┐ роЪрпЖропрпНродро╛ ро╡ро┐ро│рпИроЪрпНроЪро▓рпН роиро┐роЪрпНроЪропроорпН роЕродро┐роХро░ро┐роХрпНроХрпБроорпН!" рокрпЛройрпНро▒ роЙрогрпНроорпИропро╛рой ро╡ро┐ро╡роЪро╛роп роЙро░рпИропро╛роЯро▓рпН роЙрогро░рпНро╡рпБроХро│рпН роЪрпЗро░рпНроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН.
роЙродро╛ро░рогроЩрпНроХро│рпН роорпВро▓роорпН ро╡ро┐ро│роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН (роЙродро╛: "роЗродрпБ рокрпЛро▓рпН роЪрпЖропрпНродро╛ро▓рпН, роХрпЛропроорпНрокрпБродрпНродрпВро░ро┐ро▓рпН рокро▓ ро╡ро┐ро╡роЪро╛ропро┐роХро│рпН роЕродро┐роХ роороХроЪрпВро▓рпН рокрпЖро▒рпНро▒рпБро│рпНро│ройро░рпН").
ЁЯУМ роорпБродройрпНроорпИропро╛роХ ро╡ро┐ро╡роЪро╛ропроХрпНроХрпЗро▒рпНрок рокродро┐ро▓ро│ро┐роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН:

рокропройро░рпН ро╡ро┐ро╡роЪро╛ропроорпН родрпКроЯро░рпНрокро╛рой роХрпЗро│рпНро╡ро┐роХро│рпИ роороЯрпНроЯрпБроорпЗ роХрпЗроЯрпНроЯро╛ро▓рпН рокродро┐ро▓ро│ро┐роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН.
рокропройро░рпН ро╡рпЗро▒рпБ родро▓рпИрокрпНрокрпБроХро│ро┐ро▓рпН роХрпЗроЯрпНроЯро╛ро▓рпН, "роиро╛ройрпН ро╡ро┐ро╡роЪро╛ропроорпН рооро▒рпНро▒рпБроорпН ро╡ро┐ро╡роЪро╛ропроорпН роЪро╛ро░рпНроирпНрод ро╡ро┐ро╖ропроЩрпНроХро│рпИ роороЯрпНроЯрпБроорпЗ рокродро┐ро▓ро│ро┐роХрпНроХ роорпБроЯро┐ропрпБроорпН" роОройрпНро▒рпБ роЪрпКро▓рпНро▓ ро╡рпЗрогрпНроЯрпБроорпН.
роОроирпНрод роХро╛ро░рогродрпНродро┐ро▒рпНроХрпБроорпН роЖроЩрпНроХро┐ро▓ ро╡ро╛ро░рпНродрпНродрпИроХро│рпН рокропройрпНрокроЯрпБродрпНродроХрпНроХрпВроЯро╛родрпБ.
роЙродро╛ро░рогроорпН (рокропройро░рпН роХрпЗро│рпНро╡ро┐роХрпНроХрпБ роЙроЯройроЯро┐ рокродро┐ро▓рпН роЕро│ро┐роХрпНроХрпБроорпН роорпБро▒рпИ):

ЁЯзС рокропройро░рпН: "родроХрпНроХро╛ро│ро┐ ро╡ро│ро░рпНроХрпНроХ роОроирпНрод рооро╛родро┐ро░ро┐ропро╛рой роорогрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН?"
ЁЯСитАНЁЯМ╛ AI (роЙройрпНройрпИрокрпН рокрпЛройрпНро▒ ро╡ро┐ро╡роЪро╛роп роЖроЪро┐ро░ро┐ропро░рпН):
"роЕрогрпНрогрпЗ, роиро▓рпНро▓ роороХроЪрпВро▓рпН рокрпЖро▒ роорогрпНроЪрпЗро▒рпНро▒рпБ роорогрпН (Loamy soil) роЪро┐ро▒рокрпНрокро╛ роЗро░рпБроХрпНроХрпБроорпН.
тЬФя╕П pH 6.0 - 7.0 роЗроЯрпИроорпИропро╛ роЗро░рпБроХрпНроХрогрпБроорпН.
тЬФя╕П роирпАро░рпЛроЯрпНроЯроорпН роЪро░ро┐ропро╛роХ роЗро░рпБроХрпНроХрогрпБроорпН, роирпАро░рпН родрпЗроЩрпНроХро┐роХрпНроХро┐роЯроХрпНроХроХрпН роХрпВроЯро╛родрпБ.
тЬФя╕П роорогрпНрогрпИ рооро░рпБроирпНродрпБ рокроЪрпБроирпНродро┤рпИ роЙро░роорпН, рооро╛роЯрпНроЯрпБроЪро╛рогроорпН, роХрпЛро┤ро┐ роЪро╛рогроорпН рокрпЛроЯрпНроЯрпБрокрпН рокрогрпНрокроЯрпБродрпНродрогрпБроорпН.
тЬФя╕П роирпАроЩрпНроХ 1 роПроХрпНроХро░рпБроХрпНроХрпБ 10-12 роЯройрпН рооро╛роЯрпНроЯрпБроЪро╛рогроорпН, 5-6 роЯройрпН роХрпЛро┤ро┐роЪро╛рогроорпН, 3-5 роЯройрпН роЙропро┐ро░рпНроЪрпНроЪродрпНродрпБ роЙро░роорпН рокрпЛроЯро▓ро╛роорпН.
тЬФя╕П роирпАро░рпН роорпЗро▓ро╛рогрпНроорпИропро╛ роЗро░рпБроирпНродро╛, рокрпЖро░ро┐роп рокро┤родрпНродроХрпНроХро╛ро│ро┐ роХро┐роЯрпИроХрпНроХрпБроорпН!"

роЗроирпНрод рооро╛родро┐ро░ро┐ропрпЗ рооройро┐родро░рпН рокрпЗроЪрпБро╡родрпБ рокрпЛро▓ ро╡ро┐ро╡ро░ро┐роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН.
роЗродройро╛ро▓рпН, ро╡ро┐ро╡роЪро╛ропро┐роХро│рпН роОро│ро┐родро┐ро▓рпН рокрпБро░ро┐роирпНродрпБ роХрпКро│рпНро│ роорпБроЯро┐ропрпБроорпН.

ЁЯЫС рокропройро░рпН ро╡рпЗро▒рпБ роХрпЗро│рпНро╡ро┐ роХрпЗроЯрпНроЯро╛ро▓рпН (роЙродро╛: "родрооро┐ро┤рпН роЗро▓роХрпНроХро┐ропроорпН роХрпБро▒ро┐родрпНродрпБ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН")
ЁЯСитАНЁЯМ╛ AI: "роЕрогрпНрогрпЗ, роиро╛ройрпН ро╡ро┐ро╡роЪро╛ропроорпН, рокропро┐ро░рпНроЪрпНроЪрпЖропрпНроХрпИ, рооро▒рпНро▒рпБроорпН ро╡ро┐ро╡роЪро╛роп роорпБро▒рпИроХро│рпН рокро▒рпНро▒ро┐роп ро╡ро┐ро╖ропроЩрпНроХро│рпИ роороЯрпНроЯрпБроорпЗ рокродро┐ро▓ро│ро┐роХрпНроХ роорпБроЯро┐ропрпБроорпН. роироорпНроо рокроЪрпБроорпИ роЙро▓роХродрпНродрпБроХрпНроХрпБ родро┐ро░рпБроорпНрокро┐, роЙроЩрпНроХро│рпБроХрпНроХрпБрокрпН рокропро┐ро░рпНроЪрпНроЪрпЖропрпНроХрпИ роХрпБро▒ро┐родрпНрод роХрпЗро│рпНро╡ро┐роХро│рпН роЗро░рпБроХрпНроХро╛?`       }

        else {

            this.speechConfig.speechRecognitionLanguage = "en-IN";

            // Set English Female voice for synthesis
            this.speechConfig.speechSynthesisVoiceName = "en-IN-PrabhatNeural";

            ai_content = `You are an experienced agricultural education instructor with 40 years in the field. Your expertise covers topics such as farming methods, crop growth, fertilizers, water management, pest control, and techniques to increase yields. 

When a user asks any farming-related question, you should first provide essential farming guidelines, followed by detailed, friendly explanations incorporating aspects such as fertilizers, water requirements, climate, soil characteristics, and systematic cropping methods. Communicate as if you are having a natural conversation about agriculture, maintaining clarity and simplicity.

### Response Guidelines:

1. **Present Information Conversationally:** 
   - Avoid structured or formal explanations. Use an informal yet informative tone, mimicking the way experienced farmers discuss practices.
   - Example: тАЬHey there! For growing tomatoes, loamy soil is your best bet, with a pH of 6.0 to 7.0.тАЭ

2. **Focus on Key Agricultural Facts:**
   - Convey important points in a clear, itemized way. Use direct, farmer-oriented language.
   - Example:
     - тЬФя╕П Soil should be well-drained and not waterlogged.
     - тЬФя╕П For 1 acre, you might need to apply 10-12 tons of cow dung compost, 5-6 tons of chicken manure, and use bone meal as a fertilizer.
     - тЬФя╕П Proper water management ensures healthy yields.

3. **Include Local Examples and Practices:**
   - Whenever relevant, illustrate your points with examples from local agriculture practices.
   - Example: тАЬFarmers in Coimbatore have seen increased yields using this method, especially for cash crops.тАЭ

4. **Utilize Proverbs and Anecdotes:**
   - Speak like a true expert in agriculture by incorporating proverbs, anecdotes, and traditional wisdom.
   - Example: тАЬAs we say, тАШA farmer is as good as his soil!тАЩтАЭ

5. **Maintain Agricultural Focus:**
   - Always respond to agricultural inquiries only. If asked about unrelated topics, politely steer the conversation back to farming.
   - Example for unrelated questions: тАЬI can only provide information related to agriculture and farming. Do you have any questions about crop cultivation or farming practices?тАЭ

Always respond in English with short answers (2-3 lines). Do not write paragraphs. I only answer questions related to agriculture, as I am an agriculture teacher. `
        }

        this.messages.push({
            role: "system",
            content: ai_content,
        });
    }

    async chat(userInput) {
        try {
            // Add user input to conversation history
            this.messages.push({
                role: "user",
                content: userInput,
            });



            // Send to Groq for processing
            const completion = await this.groq.chat.completions.create({
                messages: this.messages,
                model: "llama3-8b-8192",
                max_tokens: 1024,
                temperature: 0.7,
            }).catch(error => {
                console.error("Groq API Error:", error);

                // Rotate API key on error
                this.currentIndex = (this.currentIndex + 1) % this.apiKeys.length;
                this.groq = this.initializeGroq();

                // Retry with new API key
                return this.groq.chat.completions.create({
                    messages: this.messages,
                    model: "llama3-8b-8192",
                    max_tokens: 1024,
                    temperature: 0.7,
                });
            });

            if (completion?.choices?.[0]?.message?.content) {
                const aiResponse = completion.choices[0].message.content;

                // Add AI response to conversation history
                this.messages.push({
                    role: "assistant",
                    content: aiResponse,
                });



                // Export chat to file
                await this.exportChat();

                return aiResponse;
            } else {
                console.log("Invalid completion format:", completion);
                throw new Error("Invalid completion format");
            }
        } catch (error) {
            console.error("Chat error:", error);
            throw error;
        }
    }



    async exportChat() {
        console.log("Exporting chat...");
        const chat = [];

        for (let i = 1; i < this.messages.length; i++) { // Skip system message
            if (this.messages[i].role === "user" || this.messages[i].role === "assistant") {
                chat.push({
                    role: this.messages[i].role,
                    content: this.messages[i].content,
                    audio: this.audioFilePaths[i - 1] || null, // Adjust index for audio files
                });
            }
        }

        const chat_path = path.join(this.publicDir, "temp/chats", `${this.socket_id}.json`);
        console.log(`Writing chat to file: ${chat_path}`);

        return new Promise((resolve, reject) => {
            fs.writeFile(chat_path, JSON.stringify(chat, null, 2), (err) => {
                if (err) {
                    console.error("Error writing chat file:", err);
                    reject(err);
                } else {
                    console.log("Chat saved to file.");
                    resolve(chat_path);
                }
            });
        });
    }

    async storeAudioFile(text) {
        let visemes = [];
        const fileName = `${Date.now()}_${Math.random().toString(36).substring(2, 15)}.wav`;
        const audioFilePath = path.join(__dirname, '../client/public/temp/audio', fileName);
        console.log("Generating audio file:", audioFilePath);

        try {
            const audioConfig = sdk.AudioConfig.fromAudioFileOutput(audioFilePath);
            const synthesizer = new sdk.SpeechSynthesizer(this.speechConfig, audioConfig);

            synthesizer.visemeReceived = (s, e) => {
                visemes.push({ visemeId: e.visemeId, audioOffset: e.audioOffset / 10000 });
            };

            const ssml = `<speak version="1.0" xmlns="https://www.w3.org/2001/10/synthesis" xml:lang="en-US">
                <voice name="${this.speechConfig.speechSynthesisVoiceName}">${text}</voice>
            </speak>`;

            return new Promise((resolve, reject) => {
                synthesizer.speakSsmlAsync(ssml,
                    (result) => {
                        synthesizer.close();
                        if (result.reason === sdk.ResultReason.SynthesizingAudioCompleted) {
                            // Store the audio file path for later reference
                            this.audioFilePaths.push(audioFilePath);

                            // Return web-accessible path and visemes
                            const webPath = `/temp/audio/${fileName}`;
                            resolve({ audioFilePath: webPath, visemes });
                        } else {
                            console.error("Speech synthesis failed:", result);
                            reject(result);
                        }
                    },
                    (error) => {
                        synthesizer.close();
                        console.error("Speech synthesis error:", error);
                        reject(error);
                    }
                );
            });
        } catch (error) {
            console.error("Error in storeAudioFile:", error);
            throw error;
        }
    }
}

module.exports = Chatbot;